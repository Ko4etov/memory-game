{"version":3,"sources":["Timer/Timer.js","Field/Field.js","Table/TableHeadRow.js","Table/TableBodyRow.js","Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","mainTimerValue","name","timerStartHandler","bind","newTimer","Moment","format","this","setState","timer","timeStart","intervalID","checkEndGame","add","getEndTime","clearInterval","timeRef","disabled","event","target","checkStartGame","setInterval","timerTick","className","join","onClick","ref","Component","Field","value","time","gameEndTime","playerGameInfo","id","moveCount","getPlayerInfo","cards","link","isOpen","isFounded","arrayCardsCopy","prevCard","secondCard","addSecondCart","shuffleArray","setTimeout","map","element","undefined","find","item","gameReset","array","elementCount","length","forEach","index","cardCopy","Object","assign","push","t","i","m","Math","floor","random","currentCard","keys","card","classList","toggle","cardInfo","e","currentTarget","contains","makeCardInfo","dataset","saveCardInState","compareCards","fieldClasses","field","fieldHeader","fieldBody","fieldSquare","fieldCard","cardImg","showButton","newCardClass","slice","key","openCardHandler","data-name","data-index","data-cardname","src","alt","ClassNames","theadClassName","trClassName","elem","active","isActive","thClassName","row","keyNames","keyIndex","tdClassName","Table","data","colNames","dataCopy","prevProps","prevState","findIndex","currentIndex","player","sessionStorage","JSON","stringify","tableSortHandler","parse","a","b","newArr","sort","nameA","nameB","compareFunction","tableBodyRowClassNames","tbodyClassName","Fragment","TableHeadRow","changeActive","changeActiveHandler","TableBodyRow","App","info","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qXAIqBA,G,kBACjB,WAAaC,GAAQ,IAAD,8BAChB,4CAAMA,KAEDC,MAAQ,CACXC,eAAgB,EAChBC,KAAM,GAGR,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBART,E,iFAYlB,IAAIC,EAAWC,IAAO,CAAC,EAAG,GAAI,SAASC,OAAO,SAC9CC,KAAKC,SAAS,CACZR,eAAgBI,M,gCAIVK,EAAOC,EAAWC,GAC1B,GAAgC,IAA5BJ,KAAKT,MAAMc,aAAf,CAWAH,EADcC,EAAUG,IAAI,EAAG,WAAWP,OAAO,SAEjDC,KAAKC,SAAS,CACZR,eAAgBS,IAElBF,KAAKT,MAAMgB,WAAWP,KAAKR,MAAMC,oBAfjC,CACEe,cAAcJ,GACdJ,KAAKS,QAAQC,UAAW,EACxB,IAAIb,EAAWC,IAAO,CAAC,EAAG,GAAI,SAASC,OAAO,SAC9CC,KAAKC,SAAS,CACZR,eAAgBI,O,wCAaJc,GAAQ,IAAD,OACvBA,EAAMC,OAAOF,UAAW,EACxB,IAAIb,EAAWG,KAAKR,MAAMC,eAC1BU,EAAYL,IAAO,CAAC,EAAG,GAAI,SAC3BE,KAAKT,MAAMsB,eAAe,GAC1B,IAAIT,EAAaU,aAAY,WAAQ,EAAKC,UAAUlB,EAAUM,EAAWC,KAAe,O,+BAGhF,IAAD,OAIL,OACE,oCACE,yBACEY,UANe,CAAC,SAMQC,KAAK,MAC7BjB,KAAKR,MAAMC,gBACb,4BACAyB,QAAUlB,KAAKL,kBACfqB,UATY,CAAC,gBAUbG,IAAK,SAACV,GAAa,EAAKA,QAAUA,IAHlC,sE,GAvDuBW,cCAdC,E,YACjB,WAAY9B,GAAQ,IAAD,8BACf,4CAAMA,KAiKVsB,eAAiB,SAACS,GACd,EAAKrB,SAAS,CACVY,eAAgBS,KApKL,EAwKnBf,WAAa,SAACgB,GACV,EAAKtB,SAAS,CACVuB,YAAaD,IAEjB,IAAIE,EAAiB,CACjBC,GAAI,EACJH,KAAM,EAAK/B,MAAMgC,YACjBG,UAAW,EAAKnC,MAAMmC,WAE1B,EAAKpC,MAAMqC,cAAcH,IA/KzB,EAAKjC,MAAQ,CACTqC,MAAO,CACH,CAACH,GAAG,EAAGhC,KAAM,MAAOoC,KAAM,cAAeC,QAAQ,EAAOC,WAAW,GACnE,CAACN,GAAG,EAAGhC,KAAM,YAAaoC,KAAM,oBAAqBC,QAAQ,EAAOC,WAAW,GAC/E,CAACN,GAAG,EAAGhC,KAAM,UAAWoC,KAAM,kBAAmBC,QAAQ,EAAOC,WAAW,GAC3E,CAACN,GAAG,EAAGhC,KAAM,QAASoC,KAAM,gBAAiBC,QAAQ,EAAOC,WAAW,GACvE,CAACN,GAAG,EAAGhC,KAAM,OAAQoC,KAAM,eAAgBC,QAAQ,EAAOC,WAAW,GACrE,CAACN,GAAG,EAAGhC,KAAM,QAASoC,KAAM,gBAAiBC,QAAQ,EAAOC,WAAW,GACvE,CAACN,GAAG,EAAGhC,KAAM,QAASoC,KAAM,gBAAiBC,QAAQ,EAAOC,WAAW,GACvE,CAACN,GAAG,EAAGhC,KAAM,SAAUoC,KAAM,iBAAkBC,QAAQ,EAAOC,WAAW,GACzE,CAACN,GAAG,EAAGhC,KAAM,OAAQoC,KAAM,eAAgBC,QAAQ,EAAOC,WAAW,GACrE,CAACN,GAAG,GAAIhC,KAAM,MAAOoC,KAAM,cAAeC,QAAQ,EAAOC,WAAW,GACpE,CAACN,GAAG,GAAIhC,KAAM,OAAQoC,KAAM,eAAgBC,QAAQ,EAAOC,WAAW,GACtE,CAACN,GAAG,GAAIhC,KAAM,WAAYoC,KAAM,mBAAoBC,QAAQ,EAAOC,WAAW,GAC9E,CAACN,GAAG,GAAIhC,KAAM,OAAQoC,KAAM,eAAgBC,QAAQ,EAAOC,WAAW,GACtE,CAACN,GAAG,GAAIhC,KAAM,WAAYoC,KAAM,mBAAoBC,QAAQ,EAAOC,WAAW,GAC9E,CAACN,GAAG,GAAIhC,KAAM,MAAOoC,KAAM,cAAeC,QAAQ,EAAOC,WAAW,GACpE,CAACN,GAAG,GAAIhC,KAAM,QAASoC,KAAM,gBAAiBC,QAAQ,EAAOC,WAAW,GACxE,CAACN,GAAG,GAAIhC,KAAM,QAASoC,KAAM,gBAAiBC,QAAQ,EAAOC,WAAW,GACxE,CAACN,GAAG,GAAIhC,KAAM,OAAQoC,KAAM,eAAgBC,QAAQ,EAAOC,WAAW,IAExEC,eAAgB,GAChBC,SAAU,GACVC,WAAY,GACZtB,eAAgB,EAChBR,aAAc,EACdsB,UAAW,EACXH,YAAa,GA7BJ,E,iFAkCfxB,KAAKoC,cAAcpC,KAAKR,MAAMqC,OAC9B7B,KAAKqC,aAAarC,KAAKR,MAAMqC,OAC7B7B,KAAKC,SAAS,CACVgC,eAAgBjC,KAAKR,MAAMqC,U,kCAItB,IAAD,OACRS,YAAW,WACP,EAAK9C,MAAMyC,eAAeM,KAAK,SAAAC,GAC3BA,EAAQR,WAAY,EACpBQ,EAAQT,QAAS,KAErB,EAAK9B,SAAS,CACV4B,MAAO,EAAKrC,MAAMyC,eAClBC,SAAU,GACVC,WAAY,GACZtB,eAAgB,EAChBR,aAAc,EACdsB,UAAW,EACXH,YAAa,MAElB,O,0CAI6DiB,IAA5DzC,KAAKR,MAAMqC,MAAMa,MAAK,SAAAC,GAAI,OAAuB,IAAnBA,EAAKX,eACnChC,KAAKC,SAAS,CACVI,aAAc,IAElBL,KAAK4C,e,oCAKCC,GAAQ,IAAD,OACbC,EAAe9C,KAAKR,MAAMqC,MAAMkB,OAAS,EAC7CF,EAAMG,SAAQ,SAACR,EAASS,GACpB,IAAIC,EAAW,IACfA,EAAWC,OAAOC,OAAOF,EAAUV,IAC1Bd,GAAKoB,EACdA,GAAgB,EAChB,EAAKtD,MAAMqC,MAAMwB,KAAKH,MAE1BlD,KAAKC,SAAS,CACV4B,MAAOgB,M,mCAKFA,GAET,IADA,IAAsBS,EAAGC,EAArBC,EAAIX,EAAME,OACPS,GACLD,EAAIE,KAAKC,MAAMD,KAAKE,SAAWH,KAC/BF,EAAIT,EAAMW,GACVX,EAAMW,GAAKX,EAAMU,GACjBV,EAAMU,GAAKD,EAEbtD,KAAKC,SAAS,CACV4B,MAAOgB,M,mCAKFX,EAAU0B,GAAc,IAAD,OACK,IAAjCT,OAAOU,KAAK3B,GAAUa,QAAgBa,EAAYX,QAAUf,EAASe,QACjEf,EAASxC,OAASkE,EAAYlE,MAC9BM,KAAKR,MAAMyC,eAAeM,KAAI,SAACC,EAASS,GACjCT,EAAQd,IAAMkC,EAAYX,OAAST,EAAQd,IAAMQ,EAASe,QACzDT,EAAQR,WAAY,MAG5BhC,KAAKC,SAAS,CACV4B,MAAO7B,KAAKR,MAAMyC,eAClBC,SAAU,GACVC,WAAY,GACZR,UAAW3B,KAAKR,MAAMmC,UAAY,IAEtC3B,KAAKK,gBAELiC,YAAW,WACPsB,EAAYE,KAAKC,UAAUC,OAAO,cAClC9B,EAAS4B,KAAKC,UAAUC,OAAO,cAC/B,EAAK/D,SAAS,CACViC,SAAU,GACVC,WAAY,GACZR,UAAW,EAAKnC,MAAMmC,UAAY,MAEvC,Q,mCAMDsB,EAAOvD,EAAMoE,GACvB,MAAO,CAACb,QAAOvD,OAAMoE,U,sCAIT5B,EAAU+B,GACe,IAAjCd,OAAOU,KAAK3B,GAAUa,OACtB/C,KAAKC,SAAS,CACViC,SAAU+B,IAGdjE,KAAKC,SAAS,CACVkC,WAAY8B,M,sCAORC,GACZ,IAAIJ,EAAOI,EAAEC,cAEb,IAAIL,EAAKC,UAAUK,SAAS,mBAAoBN,EAAKC,UAAUK,SAAS,eAA+D,IAA9CjB,OAAOU,KAAK7D,KAAKR,MAAM2C,YAAYY,QAA8C,IAA9B/C,KAAKR,MAAMqB,eAAvJ,CAGAiD,EAAKC,UAAUC,OAAO,cAEtB,IAAIC,EAAWjE,KAAKqE,aAAaP,EAAKQ,QAAQrB,MAAOa,EAAKQ,QAAQ5E,KAAMoE,GAExE9D,KAAKuE,gBAAgBvE,KAAKR,MAAM0C,SAAU+B,GAE1CjE,KAAKwE,aAAaxE,KAAKR,MAAM0C,SAAU+B,M,+BAsB/B,IAAD,OACDQ,EAAe,CACjBC,MAAO,CAAC,SACRC,YAAa,CAAC,gBACdC,UAAW,CAAC,cACZC,YAAa,CAAC,gBACdC,UAAW,CAAC,QACZC,QAAS,CAAC,QAEd,OACI,yBAAK/D,UAAWyD,EAAaC,OACzB,yBAAK1D,UAAWyD,EAAaE,aACzB,kBAAC,EAAD,CACIK,YAAc,EACdnE,eAAkBb,KAAKa,eACvBR,aAAgBL,KAAKR,MAAMa,aAC3BE,WAAcP,KAAKO,cAI3B,yBAAKS,UAAWyD,EAAaG,WACzB,yBAAK5D,UAAWyD,EAAaI,aAErB7E,KAAKR,MAAMqC,MAAMU,KAAI,SAACC,EAASS,GAC3B,IAAIgC,EAAeR,EAAaK,UAAUI,MAAM,GAMhD,OALI1C,EAAQR,UACRiD,EAAa5B,KAAK,gBAAiB,cAC5Bb,EAAQT,QACfkD,EAAa5B,KAAK,cAGlB,yBACA8B,IAAKlC,EACLjC,UAAWiE,EAAahE,KAAK,KAC7BC,QAAS,EAAKkE,gBAAgBxF,KAAK,GACnCyF,YAAW7C,EAAQ9C,KACnB4F,aAAY9C,EAAQd,IAEhB,yBAAKV,UAAU,cAAf,KACA,yBAAKA,UAAU,aAAY,yBAAKA,UAAWyD,EAAaM,QAASQ,gBAAe/C,EAAQ9C,KAAM8F,IAAKhD,EAAQV,KAAM2D,IAAKjD,EAAQ9C,mB,GA7NnI0B,aCFpB,WAAC7B,GACZ,OACI,2BAAOyB,UAAWzB,EAAMmG,WAAWC,gBAC/B,wBAAI3E,UAAWzB,EAAMmG,WAAWE,aAExBrG,EAAMG,KAAK6C,KAAI,SAACsD,EAAM5C,GAClB,IAAI6C,EAAUD,EAAKE,SAAY,SAAW,GAE1C,OACI,wBACAZ,IAAKlC,EACLjC,UAAWzB,EAAMmG,WAAWM,YAAa,IAAKF,GAF9C,IAGGD,EAAKnG,KAHR,WCTb,WAACH,GACZ,OACI,wBAAIyB,UAAWzB,EAAMmG,WAAWE,aAC1BzC,OAAOU,KAAKtE,EAAM0G,KAAK1D,KAAI,SAAC2D,EAAUC,GAAX,OAAwB,wBAAInF,UAAWzB,EAAMmG,WAAWU,YAAajB,IAAKgB,GAAW5G,EAAM0G,IAAIC,SC+GzHG,G,iNA9GX7G,MAAQ,CACJ8G,KAAM,CACF,CAAC5E,GAAI,EAAGH,KAAM,QAASI,UAAW,GAClC,CAACD,GAAI,EAAGH,KAAM,QAASI,UAAW,IAClC,CAACD,GAAI,EAAGH,KAAM,QAASI,UAAW,KAEtC4E,SAAU,CACN,CAAC7G,KAAM,iCAASqG,UAAU,GAC1B,CAACrG,KAAM,qBAAOqG,UAAU,GACxB,CAACrG,KAAM,2BAAQqG,UAAU,IAE7BS,SAAU,I,kFAGKC,EAAWC,GAC1B,GAAI1G,KAAKT,MAAMkC,iBAAmBgF,EAAUhF,eAAgB,CACxD,IAAyD,IAArDiF,EAAUJ,KAAKK,WAAU,SAAAhE,GAAI,OAAgB,IAAZA,EAAKjB,MACtCgF,EAAUJ,KAAKjD,KAAKrD,KAAKT,MAAMkC,gBAC/BzB,KAAKC,SAAS,CACVqG,KAAMI,EAAUJ,WAEjB,CACH,IAAIM,EAAeF,EAAUJ,KAAKK,WAAU,SAAAhE,GAAI,OAAgB,IAAZA,EAAKjB,MACzDgF,EAAUJ,KAAKM,GAAcrF,KAAOvB,KAAKT,MAAMkC,eAAeF,KAC9DmF,EAAUJ,KAAKM,GAAcjF,UAAY3B,KAAKT,MAAMkC,eAAeE,UACnE3B,KAAKC,SAAS,CACVqG,KAAMI,EAAUJ,OAGxB,IAAIO,EAAS,CACTnF,GAAI1B,KAAKR,MAAM8G,KAAKvD,OACpBxB,KAAMvB,KAAKT,MAAMkC,eAAeF,KAChCI,UAAW3B,KAAKT,MAAMkC,eAAeE,WAEzCmF,eAAe9G,KAAKR,MAAM8G,KAAKvD,QAAUgE,KAAKC,UAAUH,GACxD7G,KAAKiH,sB,0CAKT,GAA8B,IAA1BH,eAAe/D,OACf,IAAK,IAAIQ,EAAI,EAAGA,EAAIuD,eAAe/D,OAAQQ,IAAK,CAC5C,IAAI4B,EAAM2B,eAAe3B,IAAI5B,GAC7BvD,KAAKR,MAAM8G,KAAKjD,KAAK0D,KAAKG,MAAMJ,eAAe3B,KAGvDnF,KAAKiH,mBACLjH,KAAKC,SAAS,CACVuG,SAAUxG,KAAKR,MAAM8G,S,sCAIba,EAAGC,GACnB,OAAID,EAAIC,GACI,EACRD,EAAIC,EACG,EACJ,I,yCAIH,IAAIC,EAAS,GACbrH,KAAKR,MAAM8G,KAAK/D,KAAI,SAAA2B,GAChBmD,EAAOhE,KAAKa,MAEhBmD,EAAOC,KAAK,SAASH,EAAGC,GACpB,IAAIG,EAAQJ,EAAC,UAAeK,EAAMJ,EAAC,UACnC,OAAOpH,KAAKyH,gBAAgBF,EAAOC,EAAO,SAC5C5H,KAAKI,OAEPA,KAAKC,SAAS,CACVqG,KAAMe,M,+BAKV,IAKMK,EAAyB,CAC3BC,eAAgB,aAChB/B,YAAa,iBACbQ,YAAa,uBAEjB,OACI,kBAAC,IAAMwB,SAAP,KACI,2BAAO5G,UAAU,SACb,kBAAC6G,EAAD,CACInI,KAAMM,KAAKR,MAAM+G,SACjBb,WAfe,CAC3BC,eAAgB,aAChBC,YAAa,iBACbI,YAAa,uBAaD8B,aAAc9H,KAAK+H,sBAGvB,2BAAO/G,UAAW0G,EAAuBC,gBAEjC3H,KAAKR,MAAM8G,KAAK/D,KAAI,SAACC,EAASS,GAAV,OAAoB,kBAAC+E,EAAD,CACpCtC,WAAYgC,EACZzB,IAAKzD,EACL2C,IAAKlC,c,GArGjB7B,cCgCL6G,G,kBA/Bb,WAAa1I,GAAQ,IAAD,8BAClB,4CAAMA,KAURqC,cAAgB,SAAAsG,GACd,EAAKjI,SAAS,CACZwB,eAAgByG,KAXlB,EAAK1I,MAAQ,CACXiC,eAAgB,CACdC,GAAI,EACJH,KAAM,EACNI,UAAW,IANG,E,sEAkBlB,OACE,yBAAKX,UAAU,aACb,kBAAC,EAAD,CACAY,cAAiB5B,KAAK4B,gBAEtB,kBAAC,EAAD,CACAH,eAAkBzB,KAAKR,MAAMiC,sB,GAzBnBL,cCOE+G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d155275d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Moment from 'moment';\r\nimport './Timer.scss';\r\n\r\nexport default class Timer extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n          mainTimerValue: 0,\r\n          name: 1\r\n        }\r\n        \r\n        this.timerStartHandler = this.timerStartHandler.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n      let newTimer = Moment([0, 0], \"mm:ss\").format(\"mm:ss\");\r\n      this.setState({\r\n        mainTimerValue: newTimer\r\n      })\r\n    } \r\n\r\n    timerTick(timer, timeStart, intervalID) {\r\n      if (this.props.checkEndGame === 1) {\r\n        clearInterval(intervalID)\r\n        this.timeRef.disabled = false;\r\n        let newTimer = Moment([0, 0], \"mm:ss\").format(\"mm:ss\");\r\n        this.setState({\r\n          mainTimerValue: newTimer\r\n        })\r\n        return\r\n      }\r\n\r\n      let newTime = timeStart.add(1, 'seconds').format(\"mm:ss\");\r\n      timer = newTime;\r\n      this.setState({\r\n        mainTimerValue: timer\r\n      })\r\n      this.props.getEndTime(this.state.mainTimerValue);\r\n    }\r\n\r\n    timerStartHandler(event) {\r\n      event.target.disabled = true;\r\n      let newTimer = this.state.mainTimerValue,\r\n      timeStart = Moment([0, 0], \"mm:ss\");\r\n      this.props.checkStartGame(1)\r\n      let intervalID = setInterval(() => { this.timerTick(newTimer, timeStart, intervalID) }, 1000);\r\n    }\r\n\r\n    render() {\r\n        const timerClasses = ['timer'],\r\n        buttonClasses = ['button-timer'];\r\n\r\n        return(\r\n          <>\r\n            <div \r\n              className={timerClasses.join(' ')} \r\n            >{this.state.mainTimerValue}</div>\r\n            <button \r\n            onClick={ this.timerStartHandler } \r\n            className={buttonClasses}\r\n            ref={(timeRef) => {this.timeRef = timeRef}}\r\n            >Начать игру</button>\r\n          </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Field.scss';\r\nimport Timer from '../Timer/Timer'\r\n\r\nexport default class Field extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cards: [\r\n                {id:1, name: 'dog', link: 'img/dog.jpg', isOpen: false, isFounded: false},\r\n                {id:2, name: 'crocodile', link: 'img/crocodile.jpg', isOpen: false, isFounded: false},\r\n                {id:3, name: 'giraffe', link: 'img/giraffe.jpg', isOpen: false, isFounded: false},\r\n                {id:4, name: 'horse', link: 'img/horse.jpg', isOpen: false, isFounded: false},\r\n                {id:5, name: 'lion', link: 'img/lion.jpg', isOpen: false, isFounded: false},\r\n                {id:6, name: 'rhino', link: 'img/rhino.jpg', isOpen: false, isFounded: false},\r\n                {id:7, name: 'snake', link: 'img/snake.jpg', isOpen: false, isFounded: false},\r\n                {id:8, name: 'turtle', link: 'img/turtle.jpg', isOpen: false, isFounded: false},\r\n                {id:9, name: 'wolf', link: 'img/wolf.jpg', isOpen: false, isFounded: false},\r\n                {id:10, name: 'cat', link: 'img/cat.jpg', isOpen: false, isFounded: false},\r\n                {id:11, name: 'deer', link: 'img/deer.jpg', isOpen: false, isFounded: false},\r\n                {id:12, name: 'elephant', link: 'img/elephant.jpg', isOpen: false, isFounded: false},\r\n                {id:13, name: 'frog', link: 'img/frog.jpg', isOpen: false, isFounded: false},\r\n                {id:14, name: 'hedgehog', link: 'img/hedgehog.jpg', isOpen: false, isFounded: false},\r\n                {id:15, name: 'pig', link: 'img/pig.jpg', isOpen: false, isFounded: false},\r\n                {id:16, name: 'puppy', link: 'img/puppy.jpg', isOpen: false, isFounded: false},\r\n                {id:17, name: 'snail', link: 'img/snail.jpg', isOpen: false, isFounded: false},\r\n                {id:18, name: 'toad', link: 'img/toad.jpg', isOpen: false, isFounded: false},\r\n              ],\r\n              arrayCardsCopy: [],\r\n              prevCard: {},\r\n              secondCard: {},\r\n              checkStartGame: 0,\r\n              checkEndGame: 0,\r\n              moveCount: 0,\r\n              gameEndTime: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.addSecondCart(this.state.cards)\r\n        this.shuffleArray(this.state.cards)\r\n        this.setState({\r\n            arrayCardsCopy: this.state.cards\r\n        })\r\n    }\r\n    //Сброс всех значений\r\n    gameReset() {\r\n        setTimeout(() => {\r\n            this.state.arrayCardsCopy.map( element => {\r\n                element.isFounded = false;\r\n                element.isOpen = false;\r\n            })\r\n            this.setState({\r\n                cards: this.state.arrayCardsCopy,\r\n                prevCard: {},\r\n                secondCard: {},\r\n                checkStartGame: 0,\r\n                checkEndGame: 0,\r\n                moveCount: 0,\r\n                gameEndTime: 0\r\n            })\r\n        }, 1000);\r\n    }\r\n\r\n    checkEndGame() {\r\n        if (this.state.cards.find(item => item.isFounded === false) === undefined) {\r\n            this.setState({\r\n                checkEndGame: 1\r\n            })\r\n            this.gameReset()\r\n        }\r\n    }\r\n\r\n    // Удваиваем каждую карточку\r\n    addSecondCart(array) {\r\n        let elementCount = this.state.cards.length + 1;\r\n        array.forEach((element, index) => {\r\n            let cardCopy = {};\r\n            cardCopy = Object.assign(cardCopy, element)\r\n            cardCopy.id = elementCount;\r\n            elementCount += 1;\r\n            this.state.cards.push(cardCopy)\r\n        })\r\n        this.setState({\r\n            cards: array\r\n        })\r\n    }\r\n\r\n    // Перемешиваем массив\r\n    shuffleArray(array) {\r\n        var m = array.length, t, i;\r\n        while (m) {\r\n          i = Math.floor(Math.random() * m--);\r\n          t = array[m];\r\n          array[m] = array[i];\r\n          array[i] = t;\r\n        }\r\n        this.setState({\r\n            cards: array\r\n        })\r\n    }\r\n\r\n    //Функция сравнения карточек\r\n    compareCards(prevCard, currentCard) {\r\n        if (Object.keys(prevCard).length !== 0 && currentCard.index !== prevCard.index) {\r\n            if (prevCard.name === currentCard.name) {\r\n                this.state.arrayCardsCopy.map((element, index) => {\r\n                    if(element.id == currentCard.index || element.id == prevCard.index) {\r\n                        element.isFounded = true;\r\n                    }\r\n                })\r\n                this.setState({\r\n                    cards: this.state.arrayCardsCopy,\r\n                    prevCard: {},\r\n                    secondCard: {},\r\n                    moveCount: this.state.moveCount + 1,\r\n                })\r\n                this.checkEndGame()\r\n            } else {\r\n                setTimeout(() => {\r\n                    currentCard.card.classList.toggle('card--open')\r\n                    prevCard.card.classList.toggle('card--open')\r\n                    this.setState({\r\n                        prevCard: {},\r\n                        secondCard: {},\r\n                        moveCount: this.state.moveCount + 1,\r\n                    })\r\n                }, 800);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Собираем нужную информацию о карточке\r\n    makeCardInfo (index, name, card) {\r\n        return {index, name, card}\r\n    }\r\n\r\n    //Сохраняем карточку в стейт\r\n    saveCardInState(prevCard, cardInfo) {\r\n        if (Object.keys(prevCard).length === 0) {\r\n            this.setState({\r\n                prevCard: cardInfo,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                secondCard: cardInfo,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    //Обрабатываем клик по карточке\r\n    openCardHandler(e) {\r\n        let card = e.currentTarget;\r\n        //Если у карточки уже найдена пара или она открыта или это открыта вторая карточка\r\n        if (card.classList.contains('card--founded') || card.classList.contains('card--open') || Object.keys(this.state.secondCard).length !== 0 || this.state.checkStartGame === 0) {\r\n            return\r\n        }\r\n        card.classList.toggle('card--open')\r\n        //Сохраняем информацию о карточке\r\n        let cardInfo = this.makeCardInfo(card.dataset.index, card.dataset.name, card);\r\n        //Сохраняем карточку в стейт\r\n        this.saveCardInState(this.state.prevCard, cardInfo);\r\n        //Сравниваем карточки\r\n        this.compareCards(this.state.prevCard, cardInfo);\r\n    }\r\n\r\n    checkStartGame = (value) => {\r\n        this.setState({ \r\n            checkStartGame: value,\r\n        })\r\n    }\r\n\r\n    getEndTime = (time) => {\r\n        this.setState({ \r\n            gameEndTime: time\r\n        })\r\n        let playerGameInfo = {\r\n            id: 0,\r\n            time: this.state.gameEndTime,\r\n            moveCount: this.state.moveCount\r\n        };\r\n        this.props.getPlayerInfo(playerGameInfo)\r\n    }\r\n\r\n\r\n      render() {\r\n        const fieldClasses = {\r\n            field: ['field'],\r\n            fieldHeader: ['field-header'],\r\n            fieldBody: ['field-body'],\r\n            fieldSquare: ['field-square'],\r\n            fieldCard: ['card'],\r\n            cardImg: ['img']\r\n        }\r\n        return(\r\n            <div className={fieldClasses.field}>\r\n                <div className={fieldClasses.fieldHeader}>\r\n                    <Timer\r\n                        showButton = {true}\r\n                        checkStartGame = {this.checkStartGame}\r\n                        checkEndGame = {this.state.checkEndGame}\r\n                        getEndTime = {this.getEndTime}\r\n                    />\r\n                </div>\r\n\r\n                <div className={fieldClasses.fieldBody}>\r\n                    <div className={fieldClasses.fieldSquare}>\r\n                        {\r\n                            this.state.cards.map((element, index) => {\r\n                                let newCardClass = fieldClasses.fieldCard.slice(0);\r\n                                if (element.isFounded) {\r\n                                    newCardClass.push('card--founded', 'card--open')\r\n                                } else if (element.isOpen) {\r\n                                    newCardClass.push('card--open')\r\n                                }\r\n                                return(\r\n                                    <div\r\n                                    key={index}\r\n                                    className={newCardClass.join(' ')}\r\n                                    onClick={this.openCardHandler.bind(this)}\r\n                                    data-name={element.name}\r\n                                    data-index={element.id}\r\n                                    >\r\n                                        <div className=\"card_front\"> </div>\r\n                                        <div className=\"card_back\"><img className={fieldClasses.cardImg} data-cardname={element.name} src={element.link} alt={element.name}></img></div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default (props) => {\r\n    return(\r\n        <thead className={props.ClassNames.theadClassName}>\r\n            <tr className={props.ClassNames.trClassName}>\r\n                { \r\n                    props.name.map((elem, index) => {\r\n                        let active = (elem.isActive) ? 'active' : '';\r\n\r\n                        return(\r\n                            <th \r\n                            key={index} \r\n                            className={props.ClassNames.thClassName +\" \"+ active}\r\n                            > {elem.name} </th>\r\n                        )\r\n                    })\r\n                }\r\n            </tr>\r\n        </thead>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default (props) => {\r\n    return(\r\n        <tr className={props.ClassNames.trClassName}>\r\n            { Object.keys(props.row).map((keyNames, keyIndex) => <td className={props.ClassNames.tdClassName} key={keyIndex}>{props.row[keyNames]}</td>) }\r\n        </tr>\r\n    )\r\n}","import React, {Component} from 'react';\r\nimport TableHeadRow from './TableHeadRow';\r\nimport TableBodyRow from './TableBodyRow';\r\nimport '../Table/Table.scss'\r\n\r\nclass Table extends Component {\r\n    state = {\r\n        data: [\r\n            {id: 1, time: '08:34', moveCount: 1},\r\n            {id: 2, time: '10:19', moveCount: 19},\r\n            {id: 3, time: '11:27', moveCount: 29},\r\n            ],\r\n        colNames: [\r\n            {name: 'Номер', isActive: false},\r\n            {name: 'Имя', isActive: false},\r\n            {name: 'Счет', isActive: false}\r\n            ],\r\n        dataCopy: []\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.playerGameInfo !== prevProps.playerGameInfo) {\r\n            if (prevState.data.findIndex(item => item.id === 0) === -1) {\r\n                prevState.data.push(this.props.playerGameInfo)\r\n                this.setState({\r\n                    data: prevState.data\r\n                })\r\n            } else {\r\n                let currentIndex = prevState.data.findIndex(item => item.id === 0);\r\n                prevState.data[currentIndex].time = this.props.playerGameInfo.time;\r\n                prevState.data[currentIndex].moveCount = this.props.playerGameInfo.moveCount;\r\n                this.setState({\r\n                    data: prevState.data\r\n                })\r\n            }\r\n            let player = {\r\n                id: this.state.data.length,\r\n                time: this.props.playerGameInfo.time,\r\n                moveCount: this.props.playerGameInfo.moveCount,\r\n            }\r\n            sessionStorage[this.state.data.length] = JSON.stringify(player);\r\n            this.tableSortHandler()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (sessionStorage.length !== 0) {\r\n            for (var i = 0; i < sessionStorage.length; i++) {\r\n                var key = sessionStorage.key(i);\r\n                this.state.data.push(JSON.parse(sessionStorage[key]));\r\n              }\r\n        }\r\n        this.tableSortHandler()\r\n        this.setState({\r\n            dataCopy: this.state.data\r\n        })\r\n    }\r\n\r\n    compareFunction(a, b) {\r\n    if (a < b)\r\n        return -1 \r\n    if (a > b)\r\n        return 1\r\n    return 0\r\n    }\r\n\r\n    tableSortHandler() {\r\n        let newArr = [];\r\n        this.state.data.map(e => {\r\n            newArr.push(e);\r\n        })\r\n        newArr.sort(function(a, b) {\r\n            let nameA = a['moveCount'], nameB=b['moveCount']\r\n            return this.compareFunction(nameA, nameB, 'more')\r\n        }.bind(this))\r\n\r\n        this.setState({\r\n            data: newArr\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const tableHeadRowClassNames = {\r\n            theadClassName: 'table-head',\r\n            trClassName: 'table-head-row',\r\n            thClassName: 'table-head-row_cell'\r\n        }\r\n        const tableBodyRowClassNames = {\r\n            tbodyClassName: 'table-body',\r\n            trClassName: 'table-body-row',\r\n            tdClassName: 'table-body-row_cell'\r\n        }\r\n        return(\r\n            <React.Fragment>\r\n                <table className='table'>\r\n                    <TableHeadRow \r\n                        name={this.state.colNames}\r\n                        ClassNames={tableHeadRowClassNames}\r\n                        changeActive={this.changeActiveHandler}\r\n                    />\r\n\r\n                    <tbody className={tableBodyRowClassNames.tbodyClassName}>\r\n                        { \r\n                            this.state.data.map((element, index) => <TableBodyRow \r\n                                ClassNames={tableBodyRowClassNames}\r\n                                row={element} \r\n                                key={index}\r\n                            />)\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table","import React, { Component } from 'react';\nimport Field from './Field/Field';\nimport Table from './Table/Table'\nimport './App.scss';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      playerGameInfo: {\n        id: 0,\n        time: 0,\n        moveCount: 0\n      }\n    }\n  }\n\n  getPlayerInfo = info => {\n    this.setState({\n      playerGameInfo: info\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Field\n        getPlayerInfo = {this.getPlayerInfo}\n        />\n        <Table\n        playerGameInfo = {this.state.playerGameInfo}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}